// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  walletAddress  String    @unique
  name           String?
  email          String?   @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relations
  providedServices Service[]
  bookings         Booking[]
  payments         Payment[]   @relation("RecipientPayments")
}

model Service {
  id           String   @id @default(uuid())
  serviceType  String
  providerName String
  startTime    DateTime
  endTime      DateTime
  price        Decimal  @db.Decimal(10, 2)
  meetingLink  String?
  description  String?
  status       String   // available, booked, completed
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Provider relation
  providerId   String
  provider     User      @relation(fields: [providerId], references: [id])
  
  // Relations
  bookings     Booking[]
  completions  CompletionRecord[]
  payments     Payment[]
}

model Booking {
  id              String   @id @default(uuid())
  clientName      String
  clientEmail     String?
  specialRequests String?
  bookingTime     DateTime
  status          String   // confirmed, completed, cancelled
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Client relation
  clientId        String
  client          User     @relation(fields: [clientId], references: [id])
  
  // Service relation
  serviceId       String
  service         Service  @relation(fields: [serviceId], references: [id])
  
  // Relations
  completions     CompletionRecord[]
  payments        Payment[]
}

model CompletionRecord {
  id            String   @id @default(uuid())
  completionTime DateTime
  notes         String?
  rating        Int
  createdAt     DateTime @default(now())
  
  // Relations
  bookingId     String
  booking       Booking  @relation(fields: [bookingId], references: [id])
  
  serviceId     String
  service       Service  @relation(fields: [serviceId], references: [id])
}

model Payment {
  id              String   @id @default(uuid())
  transactionTime DateTime
  paymentAmount   Decimal  @db.Decimal(10, 2)
  status          String
  description     String?
  createdAt       DateTime @default(now())
  
  // Relations
  bookingId       String
  booking         Booking  @relation(fields: [bookingId], references: [id])
  
  serviceId       String
  service         Service  @relation(fields: [serviceId], references: [id])
  
  // Recipient relation
  recipientId     String
  recipient       User     @relation("RecipientPayments", fields: [recipientId], references: [id])
} 